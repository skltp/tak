pipeline {
    agent any
    environment{
        JDK_PATH = tool name: 'Java_8_221'
        JAVA_HOME = "${JDK_PATH}"
        MAVEN_IMAGE = 'maven:3.8.1-jdk-8'
        SONAR_HOME = tool name: 'SonarScanner 4.5'
        SONAR_ENV = 'inera-sonarqube'
        SONAR_PROJECTKEY = 'ntjp-tak'
    }

    stages {
        stage('Build') {
            agent {
                docker {
                    image "${MAVEN_IMAGE}"
                    args "-v ${JDK_PATH}:${JDK_PATH} -e GRAILS_MAVEN_LOCAL=${WORKSPACE}/?/.m2/repository/"
                    reuseNode true
                }
            }
            steps {
                echo 'Starting Build stage...'
                configFileProvider([configFile(fileId: "${params.CONFIG_FILE_ID}", variable: 'MAVEN_SETTINGS')]) {
                    sh 'pwd'
                    echo 'Compiling, testing and building...'
                    echo "java home: ${JAVA_HOME}"
                    sh 'mvn --global-settings ${MAVEN_SETTINGS} clean install -Ptest-coverage'
                    script {
                        pomVersion = sh script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true
                    }
                }
            }
        }
        stage('SonarScanner') {
            steps {
                withSonarQubeEnv(credentialsId: "${params.SONAR_TOKENID}", installationName: "${SONAR_ENV}") {
                    sh """${SONAR_HOME}/bin/sonar-scanner \
                       -Dsonar.projectKey=${SONAR_PROJECTKEY} \
                       -Dsonar.projectVersion=${pomVersion} \
                       -Dsonar.java.binaries=**/target/classes \
                       -Dsonar.groovy.binaries=**/target/classes \
                       -Dsonar.test.inclusions=**/src/test/**/*.java,tak-web/test/**/*.groovy \
                       -Dsonar.coverage.jacoco.xmlReportPaths=./report/target/site/jacoco-aggregate/jacoco.xml \
                       -Dsonar.sourceEncoding=UTF-8
                       """
                }
            }
        }
    }

    post {
        always {
            echo 'Starting results handling...'
            junit '**/target/surefire-reports/TEST-*.xml'
            jacoco()
            archiveArtifacts '**/target/*.war'
        }

        unsuccessful {
            echo 'Build unsuccessful'
            emailext attachLog: true, 
                subject: "Build failed in Jenkins: ${JOB_NAME}#${BUILD_NUMBER}", 
                body: "See ${BUILD_URL} for details.",
                to: "${params.EMAIL_RECIPIENTS}"
        }

        changed {
            script {
                if ("${currentBuild.currentResult}" == 'SUCCESS') {
                    echo "Current build successful, previous build was unsuccessful"
                    emailext attachLog: true, 
                        subject: "${JOB_NAME} back to stable", 
                        body: "See ${BUILD_URL} for details.",
                        to: "${params.EMAIL_RECIPIENTS}"        
                }
            }
        }

        cleanup {
            echo 'Cleaning workspace...'
            cleanWs()
        }
    }
}